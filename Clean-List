#Fix a list of text 
$computerNames = 'WCSTRAA01
  ___WCSTRAA02
  WCSTRAA03
  ___WCSTRAA04
  WCSTRAA05
  ___WCSTRAA06
  WCSTRAA07
  ___WCSTRAA08
  000WCSTRAA09
  ___0000NEDIACA01
  000NEDIACA02
  NEDIACA03
  000NEDIACA04
  NEDIACA05
  NEDIACA06
  NEDIACA07
  NEDIACA08
NEDIACA09'.Replace("`n",',')
$ComputerList = $computerNames.Split(',').TrimStart('_','0',' ').Replace('CA','-').Replace('AA','-')

#Send it to the clipboard
$ComputerList | clip.exe

#Make reusable
function Clean-List
{
  param(
    [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
    [String[]]$List
  )
  $CommaString = $List.Replace("`n",',')
  $CleanArray = $CommaString.Split(',').Trim('_',',','.','\','/','-','@',' ').TrimStart('0')
  Return $CleanArray
}

Clean-List -List $computerNames


#Convert it to a hashtable with FQDN's and use it to Ping those names (uses write-host for the example)
$FQDNlist = @{} #Hashtable
$ComputerList | ForEach-Object -Process {
  $FQDNlist.$_ = $_.ToLower()+'.domain.com'
}
foreach($key in $FQDNlist.Keys)
{
  Write-Host -Object "Ping: $($FQDNlist.$key)" -ForegroundColor Yellow
}

### END ###

<###
Extra Information: The Backtick (`) operator is an escape character or word-wrap operator.  
The later I am not a fan of because, it is not always clear if it is a single quote, a spec on your screen or dead pixel. It isn't always clearer in print, like a PowerShell text book.

"`$IsAString2`tis`t$IsAString2"

"This `"string`" `$uses `r`n Backticks '``'"
'This "string" $uses {0}{1} Formatting {2}' -f "`r","`n","'``'"

As used as above it is an escape character 
`n = New line (ASCII 13)
`t = Tab (ASCII 9)
`r = Carriage Return (ASCII 10)

It is also called word-wrap operator and used when you need to write a script on multiple lines for easy reading. Often used with online examples. 
But, there are better ways to handle these situations.
So this:
Get-Printer | Select-Object -Property * | Select-Object Name,Type,PrinterStatus

Can become this:
Get-Printer `
| Select-Object `
 -Property * `
| Select-Object Name,Type,PrinterStatus

Or you can use the '|' pipe to separate lines:
Get-Printer | 
  Select-Object -Property * | 
  Select-Object Name,Type,PrinterStatus

And for our Ping-IpRange example
Ping-IpRange -First3Octets 192.168.0 -FirstAddress 0 -LastAddress 10

Could be:
$Splat = @{
  First3Octets = '192.168.0'
  FirstAddress = 0
  LastAddress  = 5
}
Ping-IpRange @Splat

Remember this is about making the code more readable with shorter lines.
 ###>
